# importing whole module
from tkinter import *
from tkinter.ttk import *
from tkinter import ttk
import pandas as pd
 
# importing strftime function to
# retrieve system's time
from time import strftime
from datetime import datetime

# Globals
increment_sec = 0
df = pd.DataFrame()

# This is called at the start and then every 24h after to re-read the pass file
def read_new_pass_times():
    global df
    print(strftime('%Y-%m-%d %H:%M:%S') + ' local time: loading new pass times')
    pass_file = '/Users/gs-ops/Dropbox/minxss_dropbox/tle/Boulder/passes_manual_BOULDER.csv'
    df_all = pd.read_csv(pass_file, skiprows=1)
    df_all.columns = ['Satellite', 'Start Time', 'End Time', 'Duration Minutes', \
                      'Peak Elevation', 'Rise Azimuth', 'Set Azimuth', 'In Sunlight', \
                      'UHF Priority', 'S-Band Priority', 'Manually Edited']
    df_all = df_all.iloc[:-1]
    # Convert peak el and aos/los times
    df_all['Peak Elevation'] = df_all['Peak Elevation'].round().astype(int)
    df_all['Start Time'] = pd.to_datetime(df_all['Start Time'])
    df_all['End Time'] = pd.to_datetime(df_all['End Time'])
    df = df_all # a global data frame for the passes
    # Clear the "future passes" list and re-populate
    lbl_listbox.delete(0,END)
    now = datetime.utcnow()
    for i in list(df_all.index.values):
        # Also flag if this pass is in sun or eclipse
    	if df_pass['In Sunlight'] == ' YES':
        	daynight = '☼'
   	 	else:
        	daynight = '☾'
        
        if now < df_all.loc[i,"Start Time"]:
            if 'Keep' in df_all.loc[i,'UHF Priority'] and 'Keep' in df_all.loc[i,'S-Band Priority']:
                flags = "UHF and S-BAND"
            elif 'Keep' in df_all.loc[i,'UHF Priority'] and 'Delete' in df_all.loc[i,'S-Band Priority']:
                flags = "UHF only"
            elif 'Delete' in df_all.loc[i,'UHF Priority'] and 'Keep' in df_all.loc[i,'S-Band Priority']:
                flags = "S-BAND only"
            else:
            	flags = "N/A"
            listbox_str = "{} UTC | {} | {}º peak el | {} | {}".format(\
            df_all.loc[i,"Start Time"].strftime('%m-%d %H:%M:%S'), \
            df_all.loc[i,"Satellite"], str(df_all.loc[i,"Peak Elevation"]), daynight, flags)
            lbl_listbox.insert(i, listbox_str)

# creating tkinter window
root = Tk()
root.geometry("1200x380+0+0")
root.title('MOC Clock')
root.configure(background='black')

# This function loops every second and updates the df of passes, utc time local time, and 
# future passes (in lbl_listbox)
def time():
    global increment_sec, df
    increment_sec += 1
    # Re-read new pass times 1x/day
    if increment_sec >= 86400:
        increment_sec = 0
        read_new_pass_times()

	# Define big red UTC/ local timers at the top
    utc_time = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S') + ' UTC'
    local_time = strftime('%Y-%m-%d %H:%M:%S') + ' local'
    lbl_t_utc.config(text=utc_time)
    lbl_t_utc.after(1000, time)
    lbl_t_local.config(text=local_time)

    now = datetime.utcnow()
    # If there are no passes encompassing now, find next pass
    # and the hrs/mins/secs until AOS
    if df[(df['Start Time'] < now <= df['End Time'])].empty:
        bla = df[df['Start Time'] > now]
        df_pass = bla.iloc[0]
        countdown = df_pass['Start Time'] - now
        hours, remainder = divmod(countdown.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        aos_los = 'AOS'
        countdown_color = 'white'
        # If this pass just started, delete it from the "future passes" list
        if int(countdown.total_seconds()) == 0:
            lbl_listbox.delete(0)
    # else, there is a pass now; make this row GREEN with a countdown to LOS
    else:
        df_pass = df[(df['Start Time'] < now < df['End Time'])].iloc[0]
        countdown = df_pass['End Time'] - now
        hours, remainder = divmod(countdown.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        aos_los = 'LOS'
        countdown_color = 'green'

    # Also flag if this pass is in sun or eclipse
    if df_pass['In Sunlight'] == ' YES':
        daynight = 'sun'
    else:
        daynight = 'eclipse'
    
    # Info on type of pass
    if 'Keep' in df_pass['UHF Priority'] and 'Keep' in df_pass['S-Band Priority']:
        flags = "UHF and S-BAND"
    elif 'Keep' in df_pass['UHF Priority'] and 'Delete' in df_pass['S-Band Priority']:
        flags = "UHF only"
    elif 'Delete' in df_pass['UHF Priority'] and 'Keep' in df_pass['S-Band Priority']:
        flags = "S-BAND only"
    else:
        flags = "N/A"
    lbl_countdown.config(text='{:02}:{:02}:{:02} to{} {} | {}º peak el | {} | {}'.format(\
                         int(hours), int(minutes), int(seconds), df_pass['Satellite'], aos_los, \
                         df_pass['Peak Elevation'], daynight, flags))
    lbl_countdown.config(foreground=countdown_color)

# Define the GUI graphical elements here
lbl_t_utc = Label(root, font=('calibri', 80, 'bold'),
                  background='black',
                  foreground='red')
lbl_t_local = Label(root, font=('calibri', 60),
                    background='black',
                    foreground='red')
lbl_countdown = Label(root, font=('calibri', 40),
                      background='black',
                      foreground='white')
lbl_listbox = Listbox(root,height = 5,
                    width = 50,
                    font=('calibri', 40),
                    background='black',
                    foreground='white',
                    selectmode='single')
style = ttk.Style(root)
style.theme_use('classic')
style.configure('Tlabel', background='black', foreground='red')
style.configure('TFrame', background='black')

lbl_t_utc.pack(anchor='center')
lbl_t_local.pack(anchor='center')
lbl_countdown.pack(anchor='center')
lbl_listbox.pack(anchor='center')

# Call the GUI update loops
read_new_pass_times()
time()
 
mainloop()
